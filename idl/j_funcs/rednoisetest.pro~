function rednoisetest, yy, maxbs=maxbs, plt=plt, outf=outf, $
                       usemean=usemean, verbose=verbose, stp=stp

;Syntax IDL> result ( [white, red] ) = 
; rednoisetest(yy,maxbs=30,outf='test.ps',/usemean,/verbose,/stp)
np = n_elements(yy)
if n_elements(maxbs) eq 0 then maxbs = long(2*sqrt(np))
if not keyword_set(usemean) then usemean=0
if n_elements(outf) eq 0 then outf='rntest.ps'

binsizes = 1+dindgen(maxbs)
binnedrms = dblarr(maxbs)  ;Sigma_n

for bsi = 0, maxbs-1 do binnedrms[bsi]=binrms(yy,bs=bsi+1,usemean=usemean)

;stop

;Find the best-fit parameters SIGW and SIGR such that:
; sig^2 = sigw^2 / N + sigr^2

n = double(binsizes)            ;N
sig_n = binnedrms               ;Sigma_N
ss = binnedrms^2     ;Sigma_n squared
nbs = n_elements(n)

;Guess grids (test values)
;sigma_w: 0-200% of sig_n[0]
  swres = 80   ;sigma_w resolution
  sigwg = (dindgen(2*swres+1)/swres) * sig_n[0]
;sigma_r: 0-200% of sig_n[max N]
  srres = 80   ;sigma_r resolution
  sigrg = (dindgen(2*srres+1)/srres) * sig_n[nbs-1]

;Guess cube: layer[0]=wnoise, [1]=rnoise, [2]=chisq
gcube = dblarr(n_elements(sigwg),n_elements(sigrg),3)

;New: use the equation N*Sig_n^2 = Sig_w^2 + Sig_r^2 * N
;For the Chi^2, fit model (Nsign2) to actual
nsns = n*sig_n^2

for wgi=0,n_elements(sigwg)-1 do begin
  for rgi=0,n_elements(sigrg)-1 do begin
    gcube[wgi,rgi,0]=sigwg[wgi]
    gcube[wgi,rgi,1]=sigrg[rgi]
    nsnsc = sigwg[wgi]^2 + n * sigrg[rgi]^2
    resid = nsns - nsnsc
;    sncalc = sqrt( (sigwg[wgi]^2 / n) + sigrg[rgi]^2 )  ;calc sig_n
;    resid = sig_n - sncalc
    gcube[wgi,rgi,2]=total(resid^2)
 endfor
endfor

if keyword_set(stp) then stop

csq = gcube[*,*,2]
best=where(csq eq min(csq))

wnsq=gcube[*,*,0]
rnsq=gcube[*,*,1]

bsigw = wnsq[best[0]]
bsigr = rnsq[best[0]]
;bsigw = sqrt(wnsq[best[0]])
;bsigr = sqrt(rnsq[best[0]])
nssm = bsigw^2 + bsigr^2 * n  ;n sig_n^2 model

if keyword_set(verbose) then begin
  print, 'Tested Sig_w range ', minmax(sigwg)
  print, 'Tested Sig_r range ', minmax(sigrg)
  print, 'Best fits:'
  print, 'White Noise: ', bsigw
  print, 'Red Noise:   ', bsigr
endif

if keyword_set(plt) then begin
  psopen, outf
  !p.multi=[0,1,2]
;  for ylogi=0,1 do begin
    plot, binsizes, binnedrms, psym=6, thick=3, symsize=0.6, $
          charsize=1.2, charthick=2, $
          xtitle='Bin size', ytitle=textoidl('\sigma_n'), $
          title='RMS of Binned Residuals';, ylog=ylogi
    oplot, [0,maxbs], [bsigw,bsigw], thick=3, linestyle=2
    oplot, binsizes, bsigw/binsizes, thick=3
    oplot, [0,maxbs], [bsigr,bsigr], thick=3, linestyle=2, color=2
    oplot, binsizes, sqrt( bsigr^2 + (bsigw/binsizes)^2 ), $
           thick=3, linestyle=3, color=4
    legend, ['White Noise (per point)', 'White Noise (binned)', $
             'Red Noise', 'Combined'], thick=3, $
            linestyle=[2,0,2,3], color=[0,0,2,4], /top, /right
;  endfor
    plot, binsizes, ss*n, psym=6, thick=3,symsize=0.6, $
          charsize=1.2, charthick=2, $
          xtitle='Bin Size', ytitle=textoidl('N \sigma_n^2')
    oplot, binsizes, nssm, thick=3, linestyle=2, color=4
    legend, /bottom, /right, thick=3, linestyle=[0,2], psym=[6,0], color=[0,4], $
            [textoidl('N \sigma_n^2 (calc)'), textoidl('N \sigma_n^2 (best-fit)')]
  psclose
endif

if keyword_set(stp) then stop

return, [bsigw,bsigr]
end
